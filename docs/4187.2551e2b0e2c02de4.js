"use strict";(self.webpackChunkprime_lib_doc=self.webpackChunkprime_lib_doc||[]).push([[4187],{4187:(b,o,e)=>{e.r(o),e.d(o,{InjectScriptTagComponent:()=>i});var p=e(7979);const a={stepService:'import { Renderer2, Inject, Injectable } from "@angular/core";\nimport { DOCUMENT } from "@angular/common";\n\n  @Injectable({\n    providedIn: "root",\n  })\n  export class InjectScriptTagService {\n\n    constructor(@Inject(DOCUMENT) private document: Document) {}\n    <div><span style="font-size: 17px; color: rgb(61, 142, 185);">/* &nbsp;<br>&nbsp;* Append the JS tag ** the Document Body. &nbsp;&nbsp;<br>&nbsp;* @param ******** The Angular Renderer &nbsp; &nbsp;<br>&nbsp;* @param src *** path to the ****** &nbsp; &nbsp;<br>&nbsp;* @returns the script element &nbsp; &nbsp;<br>&nbsp;*/</span></div>\n    public loadJsScript(renderer: Renderer2, src: string): HTMLScriptElement {\n      const script = renderer.createElement("script");\n<span style="font-size: 17px; color: rgb(44, 130, 201);"> // script.type = &quot;text/javascript&quot;</span>\n    script.type = "application/ld+json";\n    script.textContent = src;\n      renderer.appendChild(this.document.body, script);\n      return script;\n    }\n  }\n  ',stepComponet:'\n  <div><span style="font-size: 17px;">&nbsp;</span><span style="color: rgb(85, 57, 130); font-size: 17px;">import&nbsp;</span><span style="font-size: 17px;">{ <span style="color: rgb(41, 105, 176);">Renderer2&nbsp;</span>} <span style="color: rgb(226, 80, 65);">from&nbsp;</span><span style="color: rgb(250, 197, 28);">&quot;@angular/core&quot;</span>;&nbsp;<br> <span style="color: rgb(85, 57, 130);">import&nbsp;</span>{ <span style="color: rgb(41, 105, 176);">InjectScriptTagService&nbsp;</span>} <span style="color: rgb(226, 80, 65);">from</span><span style="color: rgb(250, 197, 28);">&nbsp;&quot;./inject-script-tag.service&quot;</span>;<br><br> <span style="color: rgb(84, 172, 210);">constructor</span>( <span style="color: rgb(255, 0, 0);">private&nbsp;</span><span style="color: rgb(251, 160, 38);">renderer</span>: <span style="color: rgb(41, 105, 176);">Renderer2</span>, <span style="color: rgb(255, 0, 0);">private&nbsp;</span><span style="color: rgb(251, 160, 38);">injectScriptTagService</span>:&nbsp;<span style="color: rgb(41, 105, 176);">InjectScriptTagService</span>){}&nbsp;<br><br> <span style="color: rgb(65, 168, 95);">ngOnInit</span>(): void { &nbsp;<br> this.<span style="color: rgb(251, 160, 38);">injectScriptTagService</span>.<span style="color: rgb(65, 168, 95);">loadJsScript</span>(<span style="color: rgb(251, 160, 38);">this.renderer</span>,&nbsp;<br> <span style="color: rgb(41, 105, 176);">JSON</span>.<span style="color: rgb(26, 188, 156);">stringify</span>(<span style="color: rgb(251, 160, 38);">&apos;assets/seo/meta-tags/schema-markup-small-content.json&apos;</span>)); &nbsp;<br>}</span></div>',stepJson:' {\n        "@context": "https://schema.org/",\n        "@type": "WebSite",\n        "name": "Eshtri Aqar Company",\n        "url": "https://eshtriaqar.com.eg/en/",\n        "potentialAction": {\n          "@type": "SearchAction",\n          "target": "https://eshtriaqar.com.eg/ar/listings?{search_term_string}",\n          "query-input": "required name=search_term_string"\n        }\n      }, '};var t=e(4946),c=e(8558);let i=(()=>{class s{constructor(){}get steps(){return a}static#t=this.\u0275fac=function(n){return new(n||s)};static#e=this.\u0275cmp=t.Xpm({type:s,selectors:[["app-inject-script-tag"]],standalone:!0,features:[t.jDz],decls:31,vars:3,consts:[[1,"p-7"],[1,"text-4xl","font-bold","mb-4"],[1,"font-bold","text-red-600"],[1,"font-bold","text-yellow-400"],[1,"mt-8"],[1,"font-extrabold"],[3,"tsText"]],template:function(n,r){1&n&&(t.TgZ(0,"section",0)(1,"h1",1),t._uU(2,"Inject Script Tag"),t.qZA(),t.TgZ(3,"p"),t._uU(4," The easiest way to add external dependencies to your Angular projects is through "),t.TgZ(5,"span",2),t._uU(6,"npm. "),t.qZA(),t._uU(7,"The second best option is to add "),t.TgZ(8,"span",3),t._uU(9,"Script"),t.qZA(),t._uU(10," tags to the web page that hosts the application. However, that option only works if you have access to the host page. Barring that, you\u2019ll have to load your JavaScript files dynamically."),t._UZ(11,"br"),t._uU(12," That\u2019s actually fairly easy to do in JavaScript; in Angular, you have to make use of some of its built-in objects to accomplish it. In this tutorial, we\u2019ll learn a couple of strategies for attaching external JS files using a custom service. "),t.qZA(),t.TgZ(13,"div",4)(14,"h1",5),t._uU(15,"Step 1:"),t.qZA(),t.TgZ(16,"p"),t._uU(17,"Create Service"),t.qZA(),t._UZ(18,"assaf-documentation-code-block",6),t.qZA(),t.TgZ(19,"div",4)(20,"h1",5),t._uU(21,"Step 2:"),t.qZA(),t.TgZ(22,"p"),t._uU(23,"Inject Service So Can To Use It And Set Path Json File"),t.qZA(),t._UZ(24,"assaf-documentation-code-block",6),t.qZA(),t.TgZ(25,"div",4)(26,"h1",5),t._uU(27,"Step 3:"),t.qZA(),t.TgZ(28,"p"),t._uU(29,"Json File"),t.qZA(),t._UZ(30,"assaf-documentation-code-block",6),t.qZA()()),2&n&&(t.xp6(18),t.Q6J("tsText",r.steps.stepService),t.xp6(6),t.Q6J("tsText",r.steps.stepComponet),t.xp6(6),t.Q6J("tsText",r.steps.stepJson))},dependencies:[p.m,c.P]})}return s})()}}]);