"use strict";(self.webpackChunkprime_lib_doc=self.webpackChunkprime_lib_doc||[]).push([[4645],{8527:(m,p,t)=>{t.d(p,{w:()=>r});const r=(c,b,i)=>{let l="";return c?.map(g=>{l+=`<p><span style="color: #b96ad9;">import</span> { <span style="color: rgb(0, 168, 133);">${g.import}</span> } <span style="color: rgb(185, 106, 217);">from</span> <span style="color: rgb(224, 62, 45);">'${g.from}'</span>;</p>`}),l+=`<p><span style="color: #169179;">@Component</span><span style="color: #b96ad9;">({</span><br>&nbsp; &nbsp; ...<br><span style="color: #b96ad9;">})</span><br><span style="color: #b96ad9;">export</span> <span style="color: #3598db;">class</span> <span style="color: #169179;">YourComponent</span>${i?'<span> <span style="color: rgb(85, 57, 130);">implements </span>'+i+"</span>":""} {<br>${b}<br>}</p>`,l}},4897:(m,p,t)=>{t.d(p,{$:()=>r});const r=(c,b,i,l)=>({defaultValue:l,description:i,type:b,name:c})},4645:(m,p,t)=>{t.r(p),t.d(p,{HttpCallsComponent:()=>U});var r=t(7979),c=t(5384),b=t(8527);const i={defination:"HTTPCalls is a generic http requests service",import:(0,c.s)([{import:"HTTPCallsService",from:"@angular/common/http"}]),initialize:(0,b.w)([{import:"HTTPCallsService",from:"assaf-prime-lib/services"}],'<div><span style="color: rgb(85, 57, 130);">    constructor</span>(<span style="color: rgb(85, 57, 130);">private</span> __http:<span style="color: rgb(65, 168, 95);">HTTPCallsService</span>){}</div>'),usage:'<p><strong><span style="color: rgb(184, 49, 47);">NOTE :&nbsp;</span></strong>Assume that you have a database of &apos;<span style="color: rgb(65, 168, 95);"><strong>employees</strong></span>&apos; data.<br> <span style="color: rgb(184, 49, 47);">&nbsp; &nbsp; *</span>&nbsp; you will make an interface called &apos;<span style="color: rgb(85, 57, 130);"><strong>Employee</strong></span>&apos; and pass it as a type of data&nbsp;<br> &nbsp; &nbsp; that you will interact with it by &quot;<span style="color: rgb(243, 121, 52);"><strong>consumingAPI</strong></span>&quot; method.</p>\n<div><span style="color: rgb(184, 49, 47);">GET Request:</span> <span style="color: rgb(85, 57, 130);"><br>&nbsp; &nbsp; this.__http</span>.<span style="color: rgb(243, 121, 52);">consumingAPI</span>&lt;<span style="color: rgb(65, 168, 95);">Employee</span>&gt;<span style="color: rgb(243, 121, 52);">(</span>&apos;http://localhost:4200/employees&apos;, &apos;<span style="color: rgb(41, 105, 176);">GET</span>&apos;<span style="color: rgb(243, 121, 52);">)</span>.subscribe(<br> &nbsp; &nbsp; &nbsp; (<span style="color: rgb(65, 168, 95);">response</span>:any) =&gt; console.<span style="color: rgb(243, 121, 52);">log(</span>response))<br><span style="color: rgb(184, 49, 47);">POST Request:</span> <br><span style="color: rgb(85, 57, 130);">&nbsp; &nbsp; this.__http</span>.<span style="color: rgb(243, 121, 52);">consumingAPI</span>&lt;<span style="color: rgb(65, 168, 95);">Employee</span>&gt;<span style="color: rgb(243, 121, 52);">(</span>&apos;http://localhost:4200/employees&apos;, &apos;<span style="color: rgb(41, 105, 176);">POST</span>&apos;, employee<span style="color: rgb(243, 121, 52);">)<br></span>&nbsp; &nbsp; &nbsp; .subscribe((<span style="color: rgb(65, 168, 95);">response</span>:any) =&gt; console.<span style="color: rgb(243, 121, 52);">log(</span>response<span style="color: rgb(243, 121, 52);">)</span>)</div><div><span style="color: rgb(184, 49, 47);">DELETE Request:</span> <span style="color: rgb(85, 57, 130);"><br>&nbsp; &nbsp; this.__http</span>.<span style="color: rgb(243, 121, 52);">consumingAPI</span>&lt;<span style="color: rgb(65, 168, 95);">Employee</span>&gt;<span style="color: rgb(243, 121, 52);">(</span>&apos;http://localhost:4200/employees&apos;, &apos;<span style="color: rgb(41, 105, 176);">DELETE</span>&apos;<span style="color: rgb(243, 121, 52);">)</span>.subscribe(<br> (<span style="color: rgb(65, 168, 95);">response</span>:any) =&gt; console.<span style="color: rgb(243, 121, 52);">log(</span>response))<br><br><span style="color: rgb(184, 49, 47);">PUT Request:</span><br><span style="color: rgb(85, 57, 130);">&nbsp; &nbsp; this.__http</span>.<span style="color: rgb(243, 121, 52);">consumingAPI</span>&lt;<span style="color: rgb(65, 168, 95);">Employee</span>&gt;<span style="color: rgb(243, 121, 52);">(</span>&apos;http://localhost:4200/employees&apos;, &apos;<span style="color: rgb(41, 105, 176);">PUT</span>&apos;, employee<span style="color: rgb(243, 121, 52);">)<br></span>&nbsp; &nbsp; &nbsp; .subscribe((<span style="color: rgb(65, 168, 95);">response</span>:any) =&gt; console.<span style="color: rgb(243, 121, 52);">log(</span>response<span style="color: rgb(243, 121, 52);">)</span>)</div>'},g=[(0,t(1750).S)("consumingAPI<T>","Sends request must be one of this\n    [' PUT ' ,' POST ' ,' DELETE ' ,' GET ' ]","(\n        url: string,\n        requestType: RequestType,\n        data?: any,\n        optionsObserveResponse?: {}\n      ): Observable<Partial<HttpResponse<T>> | Partial<HttpEvent<T>> | Partial<T>>",["url: is the url for sending request","requestType: sets request type based on REST modes","data: is the data to be sent in body","optionsObserveResponse to be sent in header Observe different  types of response in HttpClient a @returns Observable based on requestType"])];var d=t(4897);const h={requestType:[(0,d.$)("POST","strnig","Used as shown text for post data in Database"),(0,d.$)("PUT","strnig","Used as shown text for update data in Database"),(0,d.$)("GET","string","Used as shown text for get data from Database"),(0,d.$)("DELETE","string","Used as shown text for delete data from Database")]};var T=t(8537),f=t(2338),y=t(7860),v=t(5619),s=t(4946),u=t(4844),C=t(5219),x=t(622),Z=t(6814);function P(e,q){if(1&e&&(s.TgZ(0,"h3",4),s._uU(1,"HttpCalls Methods"),s.qZA(),s._UZ(2,"assaf-data-table",5)),2&e){const a=s.oxw();s.xp6(2),s.Q6J("tableColumns",a._headers)("data",a._methods)}}function E(e,q){if(1&e&&(s.TgZ(0,"div")(1,"h3",6),s._uU(2,"<requestType> Interface"),s.qZA(),s._UZ(3,"assaf-data-table",5),s.qZA()),2&e){const a=s.oxw();s.xp6(3),s.Q6J("tableColumns",a._generalHeaders)("data",a._requestType)}}let H=(()=>{class e{constructor(){this._headers=(0,T.s)(),this._isMobile=new v.X(0),this._generalHeaders=(0,f.a)()}onResize(a){this._isMobile.next(a.target?.innerWidth)}get _methods(){return(0,y.d)(g)}get _requestType(){return(0,y.d)(h.requestType)}ngOnInit(){this._isMobile.next(window.innerWidth)}static#s=this.\u0275fac=function(n){return new(n||e)};static#t=this.\u0275cmp=s.Xpm({type:e,selectors:[["assaf-documentation-http-calls-table"]],hostBindings:function(n,o){1&n&&s.NdJ("resize",function(S){return o.onResize(S)},!1,s.Jf7)},standalone:!0,features:[s.jDz],decls:6,vars:4,consts:[[3,"scrollable","styleClass"],["header","Methods","leftIcon","pi pi-cog"],["pTemplate","content"],["header","Interfaces","leftIcon","pi-code pi"],[1,"font-bold","text-xl","mb-5"],[3,"tableColumns","data"],[1,"font-bold","text-xl","mb-3"]],template:function(n,o){1&n&&(s.TgZ(0,"p-tabView",0),s.ALo(1,"async"),s.TgZ(2,"p-tabPanel",1),s.YNc(3,P,3,2,"ng-template",2),s.qZA(),s.TgZ(4,"p-tabPanel",3),s.YNc(5,E,4,2,"ng-template",2),s.qZA()()),2&n&&(s.s9C("styleClass",o._isMobile.value<=768?"center-tabview":""),s.Q6J("scrollable",s.lcZ(1,2,o._isMobile)<=425))},dependencies:[r.m,u.xf,u.x4,C.jx,x.Yo,Z.Ov]})}return e})();var A=t(8558);let U=(()=>{class e{get initialize(){return i}static#s=this.\u0275fac=function(n){return new(n||e)};static#t=this.\u0275cmp=s.Xpm({type:e,selectors:[["assaf-documentation-http-calls"]],standalone:!0,features:[s.jDz],decls:23,vars:4,consts:[[1,"p-5"],[1,"text-4xl","font-bold","mb-4"],[1,"text-gray-600"],[1,"mt-10","mb-10"],[1,"text-xl","font-bold"],[1,"mt-5"],[1,"text-gray-600","mb-3"],[3,"tsText"]],template:function(n,o){1&n&&(s.TgZ(0,"section",0)(1,"h1",1),s._uU(2,"HttpCalls Services"),s.qZA(),s.TgZ(3,"p",2),s._uU(4),s.qZA(),s.TgZ(5,"div",3)(6,"h2",4),s._uU(7,"steps"),s.qZA(),s.TgZ(8,"ol")(9,"li",5)(10,"p",6),s._uU(11," Step 1 / Import the service in your component's module "),s.qZA(),s._UZ(12,"assaf-documentation-code-block",7),s.qZA(),s.TgZ(13,"li",5)(14,"p",6),s._uU(15," Step 2 / inject the service in your Service's constructor "),s.qZA(),s._UZ(16,"assaf-documentation-code-block",7),s.qZA(),s.TgZ(17,"li",5)(18,"p",6),s._uU(19," Examples for Use it in your Service "),s.qZA(),s._UZ(20,"assaf-documentation-code-block",7),s.qZA()()(),s.TgZ(21,"section"),s._UZ(22,"assaf-documentation-http-calls-table"),s.qZA()()),2&n&&(s.xp6(4),s.Oqu(o.initialize.defination),s.xp6(8),s.Q6J("tsText",o.initialize.import),s.xp6(4),s.Q6J("tsText",o.initialize.initialize),s.xp6(4),s.Q6J("tsText",o.initialize.usage))},dependencies:[r.m,A.P,H]})}return e})()}}]);