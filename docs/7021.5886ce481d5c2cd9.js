"use strict";(self.webpackChunkprime_lib_doc=self.webpackChunkprime_lib_doc||[]).push([[7021],{8527:(u,c,s)=>{s.d(c,{w:()=>i});const i=(d,g,r)=>{let l="";return d?.map(y=>{l+=`<p><span style="color: #b96ad9;">import</span> { <span style="color: rgb(0, 168, 133);">${y.import}</span> } <span style="color: rgb(185, 106, 217);">from</span> <span style="color: rgb(224, 62, 45);">'${y.from}'</span>;</p>`}),l+=`<p><span style="color: #169179;">@Component</span><span style="color: #b96ad9;">({</span><br>&nbsp; &nbsp; ...<br><span style="color: #b96ad9;">})</span><br><span style="color: #b96ad9;">export</span> <span style="color: #3598db;">class</span> <span style="color: #169179;">YourComponent</span>${r?'<span> <span style="color: rgb(85, 57, 130);">implements </span>'+r+"</span>":""} {<br>${g}<br>}</p>`,l}},4897:(u,c,s)=>{s.d(c,{$:()=>i});const i=(d,g,r,l)=>({defaultValue:l,description:r,type:g,name:d})},7021:(u,c,s)=>{s.r(c),s.d(c,{AccessLayerComponent:()=>w});var i=s(7979),d=s(8537),g=s(2338),r=s(7860),l=s(5619),y=s(5384),f=s(8527);const v={defination:'<div><strong>Access Layer</strong> is a layer in your application that provides easy and simplified access&nbsp;<br>and perform CRUD operations to data stored in persistent storage.<br><br> <strong><span style="color: rgb(184, 49, 47);">Note</span></strong> : this service is injectable &quot;<strong>any</strong>&quot; this mean that to make separate version of this service&nbsp;<br>it must be used in a <strong>lazy loading</strong> modules to have diffrent <strong>State</strong> for every module. &nbsp; &nbsp;</div>',benefits:{content:"<div>Angular refreshes the component when detecting any changes So any changes in the parent will make all children reloaded.&nbsp;<br>So with access layer you can change the detection strategy that refreshes only when internal changes for better performance.<br>and use &apos;<strong>async</strong>&apos; pipe for subscription to trigger the internal change.</div>",code:'<div>@<span style="color: rgb(85, 57, 130);">Component</span>({ &nbsp; &nbsp;<br>&nbsp; &nbsp; //..&nbsp;<br>&nbsp; &nbsp; <span style="color: rgb(41, 105, 176);">changeDetection</span>: ChangeDetectionStrategy.<span style="color: rgb(243, 121, 52);">OnPush</span><br>})</div>'},setup:(0,y.s)([{import:"HttpClientModule",from:"@angular/common/http"}]),Import:(0,f.w)([{import:"AccessLayerService",from:"assaf-prime-lib/services"}],'<p>&nbsp; &nbsp; <span style="color: rgb(184, 49, 47);">//Employee is an interface of objects that exists in the Array</span><br><span style="color: rgb(147, 101, 184);">&nbsp; &nbsp; </span><span style="color: rgb(85, 57, 130);">constructor</span>(<span style="color: rgb(147, 101, 184);">private</span> __access: <span style="color: rgb(65, 168, 95);">AccessLayerService</span> &lt;<span style="color: rgb(65, 168, 95);">Employee</span>&gt;){}</p>'),initialize:(0,f.w)([{import:"AccessLayerService",from:"assaf-prime-lib/services"},{import:"Observable",from:"rxjs"}],'<div><span style="color: rgb(184, 49, 47);">&nbsp; &nbsp; //Employee is an interface of objects that exists in the Array</span><br><span style="color: rgb(85, 57, 130);">&nbsp; &nbsp; constructor</span>(<span style="color: rgb(147, 101, 184);">private</span> __access: <span style="color: rgb(65, 168, 95);">AccessLayerService</span> &lt;<span style="color: rgb(65, 168, 95);">Employee</span>&gt;){<br><span style="color: rgb(65, 168, 95);">&nbsp; &nbsp; &nbsp; this.__access</span>.<span style="color: rgb(243, 121, 52);">initService(</span>{<br> <span style="color: rgb(41, 105, 176);">&nbsp; &nbsp; &nbsp; &nbsp; get</span>:<span style="color: rgb(0, 0, 0);">&apos;get-endpoint&apos;,</span> &nbsp;<br> <span style="color: rgb(41, 105, 176);">&nbsp; &nbsp; &nbsp; &nbsp; post</span>: <span style="color: rgb(0, 0, 0);">&apos;post-endpoint&apos;, &nbsp;</span><br> <span style="color: rgb(41, 105, 176);">&nbsp; &nbsp; &nbsp; &nbsp; put</span>: &apos;<span style="color: rgb(0, 0, 0);">update-endpoint&apos;</span>, &nbsp;<br> <span style="color: rgb(41, 105, 176);">&nbsp; &nbsp; &nbsp; &nbsp; delete</span>: <span style="color: rgb(0, 0, 0);">&apos;delete-endpoint&apos; </span>&nbsp;<br> &nbsp; &nbsp; &nbsp; }<span style="color: rgb(243, 121, 52);">)</span><br>&nbsp; &nbsp; }<br><span style="color: rgb(184, 49, 47);">&nbsp; &nbsp; //&nbsp;</span><span style="color: rgb(0, 0, 0);"><strong>data$</strong></span><span style="color: rgb(184, 49, 47);">&nbsp;is an observable return of the data when subscribing to it by&nbsp;</span><br><span style="color: rgb(184, 49, 47);"><strong>&nbsp; &nbsp; databservable$</strong> that helps me to access the state of the array&nbsp;</span><br><span style="color: rgb(65, 168, 95);">&nbsp; &nbsp; data$</span>:<span style="color: rgb(65, 168, 95);">Observable</span> &lt;<span style="color: rgb(147, 101, 184);">Employee[]</span>&gt; =&nbsp;<span style="color: rgb(65, 168, 95);">this.__access</span>.dataObservable$<br><br></div>'),Management:'<div><br><span style="color: rgb(184, 49, 47);">// To create a new employee</span><br> &nbsp; &nbsp; this.<span style="color: rgb(41, 105, 176);">__access</span>.<span style="color: rgb(243, 121, 52);">create(</span>employee<span style="color: rgb(243, 121, 52);">)</span>;<br><span style="color: rgb(184, 49, 47);">// To get the data from Api</span> <br> &nbsp; &nbsp; this.<span style="color: rgb(41, 105, 176);">__access</span>.<span style="color: rgb(243, 121, 52);">load()</span>;<br><span style="color: rgb(184, 49, 47);">// To Delete employee</span><br> &nbsp; &nbsp; this.<span style="color: rgb(41, 105, 176);">__access</span>.<span style="color: rgb(243, 121, 52);">delete(</span>employee<span style="color: rgb(243, 121, 52);">)</span>;<br><span style="color: rgb(184, 49, 47);">// To update an existing employee</span> <br> &nbsp; &nbsp; this.<span style="color: rgb(41, 105, 176);">__access</span>.<span style="color: rgb(243, 121, 52);">update(</span>employee<span style="color: rgb(243, 121, 52);">)</span>;&nbsp;<br><span style="color: rgb(184, 49, 47);">// To fill state with employees array</span><br> &nbsp; &nbsp; this.<span style="color: rgb(41, 105, 176);">__access</span>.<span style="color: rgb(243, 121, 52);">fillState(</span>arrayOfEmployees<span style="color: rgb(243, 121, 52);">)</span></div>\n<div><br></div>'};var b=s(1750);const T=[(0,b.S)("load"," Loads all data on GET url","(): Observable<any>"),(0,b.S)("initService"," Initializes service with urls","(config: RequestURLs, loadFromAPI: boolean = true): void",["config: Object containing urls for requests implementing <RequestURLs> interface ","loadFromAPI: enables loading data from get url when initiating service"]),(0,b.S)("fillState","Fills state array with data externally","(data: T[]): void","data: data to be filled in state"),(0,b.S)("create"," Creates new object on POST url","(newData: T): Observable<any>","newData: Value to be posted"),(0,b.S)("update"," Updates object on PUT url","(newData: T): Observable<any>","newData: Value to be posted"),(0,b.S)("delete"," Deletes object on DELETE url","(dataToDelete: T): Observable<any>","dataToDelete: Value to be deleted")];var p=s(4897);const m={State:[(0,p.$)("data","T[]","Used as shown text for the dropdown"),(0,p.$)("selectedId","number | string","Used as shown text for the dropdown")],EnforceID:[(0,p.$)("id?","number | string","Used as shown text for the dropdown")],RequestURLs:[(0,p.$)("get?","string","Used to get all data from API"),(0,p.$)("post?","string","Used to create a new employee"),(0,p.$)("put?","string","Used to update an existing object"),(0,p.$)("delete?","string","Used to Delete object")]};var e=s(4946),h=s(4844),A=s(5219),x=s(622),Z=s(6814);function U(t,D){if(1&t&&(e.TgZ(0,"h3",4),e._uU(1,"Access Layer Methods"),e.qZA(),e._UZ(2,"assaf-data-table",5)),2&t){const a=e.oxw();e.xp6(2),e.Q6J("tableColumns",a._headers)("data",a._methods)}}function L(t,D){if(1&t&&(e.TgZ(0,"div",6)(1,"h3",7),e._uU(2,"<RequestURLs> Interface"),e.qZA(),e._UZ(3,"assaf-data-table",5),e.TgZ(4,"p",8),e._uU(5,"* ? indicates optional parameter"),e.qZA()()),2&t){const a=e.oxw();e.xp6(3),e.Q6J("tableColumns",a._generalHeaders)("data",a._requestURLsInterface)}}let S=(()=>{class t{constructor(){this._headers=(0,d.s)(),this._isMobile=new l.X(0),this._generalHeaders=(0,g.a)()}onResize(a){this._isMobile.next(a.target?.innerWidth)}get _methods(){return(0,r.d)(T)}get _enforceIDInterface(){return(0,r.d)(m.EnforceID)}get _stateInterface(){return(0,r.d)(m.State)}get _requestURLsInterface(){return(0,r.d)(m.RequestURLs)}ngOnInit(){this._isMobile.next(window.innerWidth)}static#e=this.\u0275fac=function(n){return new(n||t)};static#s=this.\u0275cmp=e.Xpm({type:t,selectors:[["assaf-documentation-acces-layer-table"]],hostBindings:function(n,o){1&n&&e.NdJ("resize",function(z){return o.onResize(z)},!1,e.Jf7)},standalone:!0,features:[e.jDz],decls:6,vars:4,consts:[[3,"scrollable","styleClass"],["header","Methods","leftIcon","pi pi-cog"],["pTemplate","content"],["header","Interfaces","leftIcon","pi-code pi"],[1,"font-bold","text-xl","mb-5"],[3,"tableColumns","data"],[1,"mt-10"],[1,"font-bold","text-xl","mb-3"],[1,"text-gray-600","font-bold"]],template:function(n,o){1&n&&(e.TgZ(0,"p-tabView",0),e.ALo(1,"async"),e.TgZ(2,"p-tabPanel",1),e.YNc(3,U,3,2,"ng-template",2),e.qZA(),e.TgZ(4,"p-tabPanel",3),e.YNc(5,L,6,2,"ng-template",2),e.qZA()()),2&n&&(e.s9C("styleClass",o._isMobile.value<=768?"center-tabview":""),e.Q6J("scrollable",e.lcZ(1,2,o._isMobile)<=425))},dependencies:[i.m,h.xf,h.x4,A.jx,x.Yo,Z.Ov]})}return t})();var C=s(8558),I=s(2343);let w=(()=>{class t{get initialize(){return v}static#e=this.\u0275fac=function(n){return new(n||t)};static#s=this.\u0275cmp=e.Xpm({type:t,selectors:[["assaf-documentation-access-layer"]],standalone:!0,features:[e.jDz],decls:27,vars:7,consts:[[1,"p-5"],[1,"text-4xl","font-bold","mb-4"],[1,"text-gray-600",3,"innerHTML"],[1,"my-10"],[1,"text-xl","font-bold"],[1,"mt-5"],[1,"text-gray-600","mb-3"],[3,"tsText"]],template:function(n,o){1&n&&(e.TgZ(0,"section",0)(1,"h1",1),e._uU(2,"Access layer"),e.qZA(),e._UZ(3,"p",2),e.ALo(4,"safehtml"),e.TgZ(5,"div",3)(6,"h2",4),e._uU(7,"steps"),e.qZA(),e.TgZ(8,"ol")(9,"li",5)(10,"p",6),e._uU(11," Step 1 / Inject HttpClientModule module into your app module "),e.qZA(),e._UZ(12,"assaf-documentation-code-block",7),e.qZA(),e.TgZ(13,"li",5)(14,"p",6),e._uU(15," Step 2 / Import and inject the service in your component's constructor "),e.qZA(),e._UZ(16,"assaf-documentation-code-block",7),e.qZA(),e.TgZ(17,"li",5)(18,"p",6),e._uU(19," Step 3 / Initializes service with urls and Loads all data on GET url to hold data in observable "),e.qZA(),e._UZ(20,"assaf-documentation-code-block",7),e.qZA(),e.TgZ(21,"li",5)(22,"p",6),e._uU(23,"Step 4 / State Management"),e.qZA(),e._UZ(24,"assaf-documentation-code-block",7),e.qZA()()(),e.TgZ(25,"section"),e._UZ(26,"assaf-documentation-acces-layer-table"),e.qZA()()),2&n&&(e.xp6(3),e.Q6J("innerHTML",e.lcZ(4,5,o.initialize.defination),e.oJD),e.xp6(9),e.Q6J("tsText",o.initialize.setup),e.xp6(4),e.Q6J("tsText",o.initialize.Import),e.xp6(4),e.Q6J("tsText",o.initialize.initialize),e.xp6(4),e.Q6J("tsText",o.initialize.Management))},dependencies:[i.m,C.P,I.r,S]})}return t})()}}]);