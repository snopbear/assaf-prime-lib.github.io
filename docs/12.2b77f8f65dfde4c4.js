"use strict";(self.webpackChunkprime_lib_doc=self.webpackChunkprime_lib_doc||[]).push([[12],{8527:(c,o,n)=>{n.d(o,{w:()=>l});const l=(b,i,a)=>{let s="";return b?.map(e=>{s+=`<p><span style="color: #b96ad9;">import</span> { <span style="color: rgb(0, 168, 133);">${e.import}</span> } <span style="color: rgb(185, 106, 217);">from</span> <span style="color: rgb(224, 62, 45);">'${e.from}'</span>;</p>`}),s+=`<p><span style="color: #169179;">@Component</span><span style="color: #b96ad9;">({</span><br>&nbsp; &nbsp; ...<br><span style="color: #b96ad9;">})</span><br><span style="color: #b96ad9;">export</span> <span style="color: #3598db;">class</span> <span style="color: #169179;">YourComponent</span>${a?'<span> <span style="color: rgb(85, 57, 130);">implements </span>'+a+"</span>":""} {<br>${i}<br>}</p>`,s}},12:(c,o,n)=>{n.r(o),n.d(o,{I18nComponent:()=>g});var l=n(7979),b=n(5384),i=n(8527);const a={configuration:(0,b.s)([{import:"NgModule",from:"@angular/core"},{import:"BrowserModule",from:"@angular/platform-browser"},{import:"HttpClientModule, HttpClient",from:"@angular/common/http"},{import:"TranslateModule, TranslateLoader",from:"@ngx-translate/core"},{import:"TranslateHttpLoader",from:"@ngx-translate/http-loader"}]),translate:"npm install @ngx-translate/core --save \nnpm install @ngx-translate/http-loader --save",componentInstllation:(0,i.w)([{import:"Component, OnInit",from:"@angular/core"},{import:" TranslateService",from:"@ngx-translate/core"},{import:"Language",from:"@models/index"}],'<div>&nbsp; &nbsp; get&nbsp;<span style="color: rgb(243, 121, 52);">language()</span> { &nbsp;<br><span style="color: rgb(85, 57, 130);">&nbsp; &nbsp; &nbsp; return</span> <span style="color: rgb(41, 105, 176);">Language</span>;&nbsp;<br>&nbsp; &nbsp; }<br><span style="color: rgb(85, 57, 130);">&nbsp; &nbsp; constructor</span>(<span style="color: rgb(147, 101, 184);">public</span> <span style="color: rgb(65, 168, 95);">translate</span>:&nbsp;<span style="color: rgb(65, 168, 95);">TranslateService</span>) {}<br> <span style="color: rgb(124, 112, 107);">&nbsp; &nbsp; //#region Life Cycle Hooks &nbsp;</span><br><span style="color: rgb(243, 121, 52);">&nbsp; &nbsp; ngOnInit()</span> { &nbsp;<br><span style="color: rgb(41, 105, 176);">&nbsp; &nbsp; &nbsp; this.translate</span>.<span style="color: rgb(243, 121, 52);">setDefaultLang(</span><span style="color: rgb(0, 0, 0);">&apos;</span>en&apos;<span style="color: rgb(243, 121, 52);">)</span>;&nbsp;<br><span style="color: rgb(41, 105, 176);">&nbsp; &nbsp; &nbsp; this.translate</span>.<span style="color: rgb(243, 121, 52);">use(</span><span style="color: rgb(41, 105, 176);">this.__local</span>.<span style="color: rgb(243, 121, 52);">getItem(</span>&apos;lang&apos;<span style="color: rgb(243, 121, 52);">)</span>?.<span style="color: rgb(243, 121, 52);">toString()&nbsp;</span><span style="color: rgb(85, 57, 130);">||</span> &apos;en&apos;<span style="color: rgb(243, 121, 52);">)</span>;<br><span style="color: rgb(184, 49, 47);">&nbsp; &nbsp; &nbsp; /* &nbsp; &nbsp;The lang property sets or returns &nbsp;or set the value of an element&apos;s lang attribute. &nbsp; &nbsp;<br>&nbsp; &nbsp; &nbsp; The lang attribute specifies the element&apos;s language code, like &quot;en&quot; for English,<br>&nbsp; &nbsp; &nbsp; &quot;es&quot; for Spanish, or &quot;fr&quot; for French. &nbsp; &nbsp;<br>&nbsp; &nbsp; &nbsp; */ &nbsp;</span> &nbsp;<br><span style="color: rgb(85, 57, 130);">&nbsp; &nbsp; &nbsp; document</span>.<span style="color: rgb(147, 101, 184);">documentElement</span>.lang = &nbsp;<span style="color: rgb(41, 105, 176);">this.__local</span>.<span style="color: rgb(243, 121, 52);">getItem(</span>&apos;lang&apos;<span style="color: rgb(243, 121, 52);">)</span>?.<span style="color: rgb(243, 121, 52);">toString()&nbsp;</span><span style="color: rgb(85, 57, 130);">||</span> &apos;en&apos;; &nbsp;<br>&nbsp; &nbsp; }&nbsp;<br><span style="color: rgb(124, 112, 107);">&nbsp; &nbsp; //#endregion Life Cycle Hooks</span></div>',"OnInit"),htmlUseage:'{{ "reusable-components.currency" | translate }}',tsUseage:' <div><span style="color: rgb(41, 105, 176);">title</span>: <span style="color: rgb(65, 168, 95);">this.__translate.</span><span style="color: rgb(243, 121, 52);">instant(</span>&apos;pages.my-requests.table.request-type&apos;<span style="color: rgb(243, 121, 52);">)</span></div>'};var s=n(4946),e=n(8558);let g=(()=>{class r{get steps(){return a}constructor(){}ngOnInit(){}static#s=this.\u0275fac=function(p){return new(p||r)};static#n=this.\u0275cmp=s.Xpm({type:r,selectors:[["app-i18n"]],standalone:!0,features:[s.jDz],decls:36,vars:5,consts:[[1,"p-7"],[1,"text-4xl","font-bold","mb-4"],[1,"text-gray-600"],[1,"text-red-600","mb-3","font-bold"],[1,"mt-10"],[1,"text-xl","font-bold"],[1,"text-gray-600","mb-3"],[3,"otherText"],[1,"mt-5"],[1,"text-red-800"],[3,"tsText"],[3,"htmlText"]],template:function(p,t){1&p&&(s.TgZ(0,"section",0)(1,"h1",1),s._uU(2,"I18N"),s.qZA(),s.TgZ(3,"p",2),s._uU(4," The i18n API allows setting translations globally for the components and integration with translation libraries. Finally, you can use ngx-translate in your Angular project. You have to import TranslateModule.forRoot() in the root NgModule of your application.To be able to use ngx-translate ou have to "),s.TgZ(5,"span",3),s._uU(6,"import TranslateModule.forRoot() "),s.qZA(),s._uU(7," in the root NgModule of your application. "),s.qZA(),s.TgZ(8,"div",4)(9,"h2",5),s._uU(10,"Install"),s.qZA(),s.TgZ(11,"p",6),s._uU(12," By default, there is no loader available. You can add translations manually using setTranslation but it is better to use a loader. You can write your own loader, or import an existing one. For example you can use the TranslateHttpLoader that will load translations from files using HttpClient. To use it, you need to install the http-loader package from @ngx-translate: "),s.qZA(),s._UZ(13,"assaf-documentation-code-block",7),s.qZA(),s.TgZ(14,"div",4)(15,"h2",5),s._uU(16,"Configuration"),s.qZA(),s.TgZ(17,"div",8)(18,"p",6),s._uU(19,' Once you\'ve decided which loader to use, you have to setup the TranslateModule to use it. Here is how you would use the TranslateHttpLoader to load translations from "/assets/i18n/[lang].json". If you want to configure a custom TranslateLoader while using '),s.TgZ(20,"strong",9),s._uU(21,"AoT"),s.qZA(),s._uU(22," compilation or Ionic, you must use an exported function instead of an inline function. "),s.qZA(),s._UZ(23,"assaf-documentation-code-block",10),s.qZA(),s.TgZ(24,"div",8)(25,"p",6),s._uU(26," In app.component.ts "),s.qZA(),s._UZ(27,"assaf-documentation-code-block",10),s.qZA(),s.TgZ(28,"div",8)(29,"p",6),s._uU(30," Usage in html "),s.qZA(),s._UZ(31,"assaf-documentation-code-block",11),s.qZA(),s.TgZ(32,"div",8)(33,"p",6),s._uU(34," Usage in TS "),s.qZA(),s._UZ(35,"assaf-documentation-code-block",10),s.qZA()()()),2&p&&(s.xp6(13),s.Q6J("otherText",t.steps.translate),s.xp6(10),s.Q6J("tsText",t.steps.configuration),s.xp6(4),s.Q6J("tsText",t.steps.componentInstllation),s.xp6(4),s.Q6J("htmlText",t.steps.htmlUseage),s.xp6(4),s.Q6J("tsText",t.steps.tsUseage))},dependencies:[l.m,e.P]})}return r})()}}]);